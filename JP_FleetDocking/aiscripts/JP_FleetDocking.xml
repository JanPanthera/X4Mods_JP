<?xml version="1.0" encoding="utf-8"?>

<aiscript name="JP_FleetDocking" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="1">
  <order id="JP_FleetDocking" name="JP FleetDocking" category="navigation" infinite="true">
    <params>
      <param name="ORDER_S_TO_DOCK" type="bool" text="Dock S ships?" default="true"/>
      <param name="ORDER_M_TO_DOCK" type="bool" text="Dock M ships?" default="true"/>
      <param name="FOLLOW_WHEN_UNABLE_TO_DOCK" text="Can't dock ~ Follow order?" type="bool" default="true"/>
      <param name="ORDER_DRONES_TO_DOCK" text="Dock Drones?" type="bool" default="true"/>
      <param name="FOLLOW_WHEN_L_OR_XL" text="L or XL ~ Follow order?" type="bool" default="true"/>
      <param name="DEBUG" text="DebugText" type="bool" default="false" advanced="true"/>
    </params>
    <skill min="0" />
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
  </order>

  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
    <handler ref="JobRemoveRequestHandler" />
  </interrupts>

  <init>
    <set_value name="$DebugDirectory" exact="'JP_AnotherExplorer.logs'"/>
    <set_value name="$DebugFileName" exact="this.ship.idcode + '.JP_AnotherExplorerV2' + '.log'"/>
  </init>

  <attention min="unknown">
    <actions>

      <wait exact="1ms"/>
      <label name="INIT"/>
      <cancel_all_orders object="this.ship"/>

      <do_if value="$DEBUG gt 0">
        <debug_to_file append="false" directory="$DebugDirectory" name="$DebugFileName" text="'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'"/>
        <debug_to_file directory="$DebugDirectory" name="$DebugFileName" text="'~~ Running JP_AnotherExplorerV2 with %1 [%2]'.[$EXPLORER.knownname, $EXPLORER.idcode] + '\n'"/>
      </do_if>

      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

      <set_value name="$AllSubordinates" exact="this.ship.allsubordinates"/>
      <create_list name="$CantDockShipList"/>
      <create_list name="$Ship_L_XL_List"/>

      <do_if value="0">
        <debug_to_file directory="$DebugDirectory" name="$DebugFileName" text="'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'"/>
        <debug_to_file directory="$DebugDirectory" name="$DebugFileName" text="'Explorer %1 [%2] is flying to %3 [%4]'.[$EXPLORER.knownname, $EXPLORER.idcode, $NearestSectorWithUnknownObjects.knownname, $NearestSectorWithUnknownObjects.owner.knownname]"/>
        <debug_to_file directory="$DebugDirectory" name="$DebugFileName" text="'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'"/>
      </do_if>

      <!-- Dock all ships who are able to dock -->
      <do_all exact="$AllSubordinates.count" counter="$_it">
        <!-- Skip if resupplier -->
        <do_if value="$AllSubordinates.{$_it}.type == shiptype.resupplier">
          <do_if value="$DEBUG">
            <debug_text text="'Ship %1 [%2] was skipped because it is a %3'.[$AllSubordinates.{$_it}.name, $AllSubordinates.{$_it}.idcode, shiptype.resupplier]"/>
          </do_if>
          <cancel_all_orders object="$AllSubordinates.{$_it}"/>
          <wait exact="1ms"/>
          <continue/>
        </do_if>
        <!-- Dock Drones -->
        <do_elseif value="$AllSubordinates.{$_it}.isunit">
          <!-- Will it dock when all orders canceld? -->
          <cancel_all_orders object="$AllSubordinates.{$_it}"/>
          <wait exact="1ms"/>
        </do_elseif>
        <!-- Dock S and M ships -->
        <do_elseif value="($AllSubordinates.{$_it}.class == class.ship_s and $ORDER_S_TO_DOCK) or ($AllSubordinates.{$_it}.class == class.ship_m and $ORDER_M_TO_DOCK)">
          <cancel_all_orders object="$AllSubordinates.{$_it}"/>
          <do_if value="$AllSubordinates.{$_it}.commander.dockingallowed.{$AllSubordinates.{$_it}}">
            <do_if value="$AllSubordinates.{$_it}.order.id" list="['DockAndWait','DockAt']" negate="true">
              <create_order object="$AllSubordinates.{$_it}" id="'DockAndWait'" immediate="true">
                <param name="destination" value="$AllSubordinates.{$_it}.commander" />
              </create_order>
              <wait exact="1ms"/>
            </do_if>
          </do_if>
          <do_else>
            <!-- can't dock so push it to the CantDockShipList -->
            <append_to_list name="$CantDockShipList" exact="$AllSubordinates.{$_it}"/>
            <wait exact="1ms"/>
          </do_else>
        </do_elseif>
        <do_elseif value="$AllSubordinates.{$_it}.class == class.ship_l or $AllSubordinates.{$_it}.class == class.ship_xl">
          <append_to_list name="$Ship_L_XL_List" exact="$AllSubordinates.{$_it}"/>
          <wait exact="1ms"/>
        </do_elseif>
        <!-- L, M and all other ships who can't dock -->
        <do_else>
          <append_to_list name="$CantDockShipList" exact="$AllSubordinates.{$_it}"/>
          <wait exact="1ms"/>
        </do_else>
      </do_all>

      <!-- Search the fleet for an ship to dock at -->
      <create_list name="$Temp_L_XL_Ships"/>
      <do_all exact="$AllSubordinates.count" counter="$_it">
        <append_to_list name="$Temp_L_XL_Ships" exact="$AllSubordinates.{$_it}"/>
      </do_all>
      <create_list name="$S_M_ToRemove"/>
      <do_all exact="$CantDockShipList.count" counter="$_it">
        <do_if value="($CantDockShipList.{$_it}.class == class.ship_s and $ORDER_S_TO_DOCK) or ($CantDockShipList.{$_it}.class == class.ship_m and $ORDER_M_TO_DOCK)">
          <do_all exact="$Temp_L_XL_Ships.count" counter="$_jt">
            <do_if value="$Temp_L_XL_Ships.{$_jt}.dockingallowed.{$CantDockShipList.{$_it}}">
              <create_order object="$CantDockShipList.{$_it}" id="'DockAndWait'">
                <param name="destination" value="$Temp_L_XL_Ships.{$_jt}" />
              </create_order>
              <append_to_list name="$S_M_ToRemove" exact="$CantDockShipList.{$_it}"/>
              <wait exact="1ms"/>
            </do_if>
            <break/>
          </do_all>
        </do_if>
      </do_all>
      <remove_from_list name="$CantDockShipList" list="$S_M_ToRemove"/>
      <remove_value name="$S_M_ToRemove"/>
      <remove_value name="$Temp_L_XL_Ships"/>

      <!-- Follow Order when unable to dock -->
      <do_if value="$FOLLOW_WHEN_UNABLE_TO_DOCK">
        <do_all exact="$CantDockShipList.count" counter="$_it">
          <create_order object="$CantDockShipList.{$_it}" id="'Follow'">
            <param name="target" value="$CantDockShipList.{$_it}.commander" />
          </create_order>
        </do_all>
      </do_if>

      <!-- Follow Order when L or XL Ship -->
      <do_if value="$FOLLOW_WHEN_L_OR_XL">
        <do_all exact="$Ship_L_XL_List.count" counter="$_it">
          <create_order object="$Ship_L_XL_List.{$_it}" id="'Follow'">
            <param name="target" value="$Ship_L_XL_List.{$_it}.commander" />
          </create_order>
        </do_all>
      </do_if>

      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

      <do_if value="$DEBUG gt 0">
        <debug_to_file directory="$DebugDirectory" name="$DebugFileName" text="'~~ Completed JP_AnotherExplorerV2 with %1 [%2]'.[$EXPLORER.knownname, $EXPLORER.idcode]"/>
        <debug_to_file directory="$DebugDirectory" name="$DebugFileName" text="'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'"/>
      </do_if>

      <label name="CLEANUP"/>
      <remove_value name="$Ship_L_XL_List"/>
      <remove_value name="$CantDockShipList"/>
      <remove_value name="$AllSubordinates"/>
      <remove_value name="$DebugFileName"/>
      <remove_value name="$DebugDirectory"/>

      <label name="FINISH"/>
      <set_order_syncpoint_reached order="this.ship.order"/>
      <cancel_order order="this.ship.order" />
      <wait exact="1ms"/>

    </actions>
  </attention>

  <on_abort>
  </on_abort>

</aiscript>